#!/bin/bash
# ----------------------------------------------
# Utility to Scan documents from HP AIO printer/scanner
#  straight to a folder
#
# Depends on :
#  * scanimage
#  * imagemagick (for mogrify)
#  * ghostscript (for gs)
#  * yad
#
# Revision history :
#  08/02/2013, V1.0 - Creation by N. Bernaerts
#  27/09/2014, V2.0 - Rework & multi scanner support
#  24/01/2015, V2.1 - Check tools availability
#  26/02/2016, V2.2 - Move config to ~/.config and add auto adjust level
#  28/02/2016, V2.3 - Select page size and generate multi-pages PDF (thanks to Kevin McArdle idea)
#  05/06/2017, V2.4 - Code cleanup
# ---------------------------------------------------

# check tools availability
command -v scanimage >/dev/null 2>&1 || { zenity --error --text="Please install scanimage"; exit 1; }
command -v mogrify >/dev/null 2>&1 || { zenity --error --text="Please install mogrify [imagemagick package]"; exit 1; }
command -v gs >/dev/null 2>&1 || { zenity --error --text="Please install gs [ghostscript package]"; exit 1; }
command -v yad >/dev/null 2>&1 || { zenity --error --text="Please install yad"; exit 1; }

# define and check configuration file
CONF_FILE="$HOME/.config/scan2folder.conf"
[ -f "${CONF_FILE}" ] || { zenity --error --text="Please create and configure ${CONF_FILE}"; exit 1; }

# initialize default parameters
TMP_FILE=$(mktemp)
DLG_WIDTH=600

# set choice possibilities
CHOICE_SCAN=0
CHOICE_EXIT=1
CHOICE_SAVE=2
CHOICE_DEVICE=3
CHOICE_PARAM=4

# ----------------------------------------------------
# User defined default parameters
# Please, do not modify anything out of this section
# ----------------------------------------------------

# if possible,load parameters from configuration file
if [ -f "$CONF_FILE" ]
then
  SCAN_NAME=$(cat ${CONF_FILE} | grep "scanner-name=" | cut -d"=" -f2-)
  SCAN_DEVICE=$(cat ${CONF_FILE} | grep "scanner-device=" | cut -d"=" -f2-)
  LIST_FORMAT=$(cat ${CONF_FILE} | grep "list-format=" | cut -d"=" -f2-)
  LIST_PAGE=$(cat ${CONF_FILE} | grep "list-page=" | cut -d"=" -f2-)
  LIST_DPI=$(cat ${CONF_FILE} | grep "list-dpi=" | cut -d"=" -f2-)
  LIST_MODE=$(cat ${CONF_FILE} | grep "list-mode=" | cut -d"=" -f2-)
  LIST_SOURCE=$(cat ${CONF_FILE} | grep "list-source=" | cut -d"=" -f2-)
  PAGE=$(cat ${CONF_FILE} | grep "default-page=" | cut -d"=" -f2)
  DPI=$(cat ${CONF_FILE} | grep "default-dpi=" | cut -d"=" -f2)
  MODE=$(cat ${CONF_FILE} | grep "default-mode=" | cut -d"=" -f2)
  SOURCE=$(cat ${CONF_FILE} | grep "default-source=" | cut -d"=" -f2)
  FORMAT=$(cat ${CONF_FILE} | grep "default-format=" | cut -d"=" -f2)
  DIRECTORY=$(cat ${CONF_FILE} | grep "default-dir=" | cut -d"=" -f2-)
fi

# if scanner not selected, force selection. Otherwise, display scan parameters dialog
[ "${SCAN_DEVICE}" = "" ] && CHOICE=${CHOICE_DEVICE} || CHOICE=${CHOICE_PARAM}

# ----------------------------------------------------
# Main loop
# ----------------------------------------------------

while [ "${CHOICE}" != "${CHOICE_EXIT}" ]
do case ${CHOICE} in

  # --------------------------------------
  # Scan pages according to parameters
  # --------------------------------------
  ${CHOICE_SCAN})
  
    (
    # beginning
    echo 0
  
    # generate timestamped filename
    FILE=$(date '+Scan_%Y%b%d-%Ih%Mm%Ss')

    # display scan message
    echo "# Scanning document from ${SOURCE} (${DPI} dpi) ..."

    # detect if scan is from the glass window
    [ "${SOURCE}" = "Flatbed" ] && PAGE_NUMBER="--batch-count 1" || PAGE_NUMBER=""

    # scan image with needed resolution
    NUMBER=$(scanimage --device-name="${SCAN_DEVICE}" --format=pnm --mode=${MODE} --resolution=${DPI} ${PAGE_NUMBER} \
                       --batch="${DIRECTORY}/${FILE}-%d.pnm" --source ${SOURCE} 2>&1 | grep "Scanned" | sed 's/^.*page \([0-9]*\).*$/\1/g' | tail --lines=1)

    # display conversion message
    echo "# Converting ${NUMBER} document(s) ..."

    # calculate default size according to page type
    WIDTH_MM=$(echo ${LIST_PAGE} | sed 's/^.*'${PAGE}' (\([0-9]*\)x[0-9]*).*$/\1/')
    HEIGHT_MM=$(echo ${LIST_PAGE} | sed 's/^.*'${PAGE}' ([0-9]*x\([0-9]*\)).*$/\1/')
    WIDTH_PIX=$((10*${WIDTH_MM}*${DPI}/254))
    HEIGHT_PIX=$((10*${HEIGHT_MM}*${DPI}/254))

    # auto adjust levels and crop picture to target page size
    mogrify -crop "${WIDTH_PIX}x${HEIGHT_PIX}+0+0" -auto-level ${DIRECTORY}/${FILE}*.pnm

    # convert to proper format
    mogrify -format ${FORMAT} -page ${PAGE} ${DIRECTORY}/${FILE}*.pnm
    rm ${DIRECTORY}/${FILE}*.pnm
 
    # if needed, merge all scanned documents in a single PDF file
    if [ "${FORMAT}" = "pdf" ]
    then
      # generate array of PDF files
      ARR_PDF=$(ls ${DIRECTORY}/${FILE}*.pdf)

      # generate resulting PDF
      gs -q -dNOPAUSE -dBATCH -dSAFER -sPAPERSIZE=${PDF_PAGE} -dPDFFitPage -dCompatibilityLevel=1.4 -sDEVICE=pdfwrite -sOutputFile="${DIRECTORY}/${FILE}.pdf" "${ARR_PDF[@]}"

      # remove PDF single pages
      rm "${ARR_PDF[@]}"
    fi

    # end
    echo 100 
    ) | yad --center --width=${DLG_WIDTH} --window-icon="scanner" --image="scanner" \
            --title "Scanning documents ..." --text="" --progress --pulsate --auto-close --no-buttons

    # back to parameter dialog box
    CHOICE=${CHOICE_PARAM}
    ;;

  # --------------------------------------
  # Save actual parameters as default
  # --------------------------------------
  
  ${CHOICE_SAVE})

    # save configuration
    echo "[scanner]" > ${CONF_FILE}
    echo "scanner-name=${SCAN_NAME}" >> ${CONF_FILE}
    echo "scanner-device=${SCAN_DEVICE}" >> ${CONF_FILE}
    echo "[list]" >> ${CONF_FILE}
    echo "list-format=${LIST_FORMAT}" >> ${CONF_FILE}
    echo "list-page=${LIST_PAGE}" >> ${CONF_FILE}
    echo "list-dpi=${LIST_DPI}" >> ${CONF_FILE}
    echo "list-mode=${LIST_MODE}" >> ${CONF_FILE}
    echo "list-source=${LIST_SOURCE}" >> ${CONF_FILE}
    echo "[default]" >> ${CONF_FILE}
    echo "default-page=${PAGE}" >> ${CONF_FILE}
    echo "default-dpi=${DPI}" >> ${CONF_FILE}
    echo "default-mode=${MODE}" >> ${CONF_FILE}
    echo "default-source=${SOURCE}" >> ${CONF_FILE}
    echo "default-format=${FORMAT}" >> ${CONF_FILE}
    echo "default-dir=${DIRECTORY}" >> ${CONF_FILE}

    # back to parameter dialog box
    CHOICE=${CHOICE_PARAM}
    ;;

  # --------------------------------------
  # Select scanner to use
  # --------------------------------------
  
  ${CHOICE_DEVICE})
  
    # list available scanners (remove all spaces and set space as separator)
    ( echo 0 ; scanimage -L > ${TMP_FILE} ; echo 100 ) | \
      yad --center --width=${DLG_WIDTH} --window-icon="scanner" --image="scanner" \
          --title "Detecting scanners ..." --text="" --progress --pulsate --auto-close --no-buttons

    # generate scanner list
    LIST_SCANNER=$(cat ${TMP_FILE} | sed 's/device..\(.*\). is a \(.*\)$/\2|\1/' | tr ' ' '_' | tr '|' ' ' | tr '\n' ' ')

    # display scanner selection dialog
    TITLE="Scanner selection"
    TEXT="Select scanner to use"
    SELECTION=$(yad --center --width=$DLG_WIDTH --height=250 --window-icon="scanner" --image="scanner" \
                    --title="$TITLE" --text="$TEXT" \
                    --list --column="Scanner" --column="Device" --hide-column=2 $LIST_SCANNER)

    # if needed, update current scanner
    if [ "${SELECTION}" != "" ]
    then
      # retrieve selected scanner
      SCAN_NAME=$(echo "${SELECTION}" | cut -d'|' -f1 | tr '_' ' ')
      SCAN_DEVICE=$(echo "${SELECTION}" | cut -d'|' -f2)
 
      # get scanner possibilities
      ( echo 0 ; scanimage --help --device ${SCAN_DEVICE} > ${TMP_FILE} ; echo 100 ) | \
        yad --center --width=${DLG_WIDTH} --window-icon="scanner" --image="scanner" \
            --title "Retrieving scanner parameters ..." --text="" --progress --pulsate --auto-close --no-buttons

      # retreive parameters list and default values
      DPI=$(cat ${TMP_FILE} | grep "\-\-resolution" | sed 's/^.*\[\(.*\)\].*$/\1/')
      LIST_DPI=$(cat ${TMP_FILE} | grep "\-\-resolution" | sed 's/^.*--resolution.\([0-9|]*\).*$/\1/' | sed 's/|/,/g')
      MODE=$(cat ${TMP_FILE} | grep "\-\-mode" | sed 's/^.*\[\(.*\)\].*$/\1/')
      LIST_MODE=$(cat ${TMP_FILE} | grep "\-\-mode" | sed 's/^.*--mode.\([^ ]*\).*$/\1/' | sed 's/|/,/g')
      SOURCE=$(cat ${TMP_FILE} | grep "\-\-source" | sed 's/^.*\[\(.*\)\].*$/\1/')
      LIST_SOURCE=$(cat ${TMP_FILE} | grep "\-\-source" | sed 's/^.*--source.\([^ ]*\).*$/\1/' | sed 's/|/,/g')
    fi

    # back to parameter dialog box
    CHOICE=${CHOICE_PARAM}
    ;;

  # --------------------------------------
  # Select scan parameters
  # --------------------------------------
  
  ${CHOICE_PARAM})
  
    # prepare dialog box lists combo lists
    # -> remove default choice and add it on top of the list
    DLG_DPI=$(echo ${LIST_DPI} | sed 's/'"${DPI}"'/,/' | sed 's/,,//')
    DLG_DPI="${DPI},${DLG_DPI}"
    DLG_MODE=$(echo ${LIST_MODE} | sed 's/'"${MODE}"'/,/' | sed 's/,,//')
    DLG_MODE="${MODE},${DLG_MODE}"
    DLG_SOURCE=$(echo ${LIST_SOURCE} | sed 's/'"${SOURCE}"'/,/' | sed 's/,,//')
    DLG_SOURCE="${SOURCE},${DLG_SOURCE}"
    DLG_FORMAT=$(echo ${LIST_FORMAT} | sed 's/'"${FORMAT}"'/,/' | sed 's/,,//')
    DLG_FORMAT="${FORMAT},${DLG_FORMAT}"

    # generate full page format string "format (wxh)" format page format
    PAGE_ITEM=$(echo ${LIST_PAGE} | sed 's/^.*\('${PAGE}' ([0-9]*x[0-9]*)\).*$/\1/')
    DLG_PAGE=$(echo "${LIST_PAGE}" | sed 's/'"${PAGE_ITEM}"'/,/' | sed 's/,,//')
    DLG_PAGE="${PAGE_ITEM},${DLG_PAGE}"

    # Scan parameter selection dialog
    TITLE="Scanning parameters"
    TEXT="Select parameters for the scan job :"
    SELECTION=$(yad --center --width=${DLG_WIDTH} --window-icon="scanner" --image="scanner" --title="${TITLE}" --text="${TEXT}" \
                   --button="Device:${CHOICE_DEVICE}" --button="Save:${CHOICE_SAVE}" --button="Close:${CHOICE_EXIT}" --button="Scan:${CHOICE_SCAN}" \
                   --form --item-separator="," \
                   --field="Scanner:RO" "${SCAN_NAME}" --field="Resolution:CB" "${DLG_DPI}" --field="Mode:CB" "${DLG_MODE}" \
                   --field="Source:CB" "${DLG_SOURCE}" --field="Format:CB" "${DLG_FORMAT}" --field="Page size:CB" "${DLG_PAGE}" \
                   --field="Location:DIR" "${DIRECTORY}")
    CHOICE=$?

    # if needed, update parameters from dialog box selection
    if [ "${SELECTION}" != "" ]
    then
      DPI=$(echo ${SELECTION} | cut -d"|" -f2)
      MODE=$(echo ${SELECTION} | cut -d"|" -f3)
      SOURCE=$(echo ${SELECTION} | cut -d"|" -f4)
      FORMAT=$(echo ${SELECTION} | cut -d"|" -f5)
      PAGE=$(echo ${SELECTION} | cut -d"|" -f6 | cut -d' ' -f1)
      DIRECTORY=$(echo ${SELECTION} | cut -d"|" -f7)
    fi
    ;;

  # --------------------------------------
  # Other choice ... should not come
  # --------------------------------------
  *)
    # by default, exit
    CHOICE=${CHOICE_EXIT}
    ;;
  esac
done

# remove temporary file
rm -f ${TMP_FILE}
