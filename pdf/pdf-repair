#!/bin/bash
# ---------------------------------------------------
# Repair broken PDF file using gs
#
# Depends on :
#   * ghostscript
#   * gvfs-bin
#   * libnotify-bin
#   * zenity
#
# Parameter :
#   $1 - full path of original PDF
#
# Revision history :
#   08/11/2014, V1.0 - Creation by N. Bernaerts
#   20/11/2014, V1.1 - Add file selection dialog box
#   24/01/2015, V1.2 - Check tools availability
# ---------------------------------------------------

# check tools availability
command -v gvfs-copy >/dev/null 2>&1 || { zenity --error --text="Please install gvfs-copy [gvfs-bin]"; exit 1; }
command -v gs >/dev/null 2>&1 || { zenity --error --text="Please install gs [ghostscript]"; exit 1; }
command -v notify-send >/dev/null 2>&1 || { zenity --error --text="Please install notify-send [libnotify-bin]"; exit 1; }

# check if parameter is given, otherwise open dialog box selection
[ "$1" != "" ] && ORG_URI="$1" || ORG_URI=$(zenity --file-selection --title="Select PDF file to repair")

# if a PDF file is selected
if [ "$ORG_URI" != "" ]
then
  # generate corrected document name
  ORG_BASE=$(echo "$ORG_URI" | sed 's/^\(.*\)\..*$/\1/')
  ORG_EXT=$(echo "$ORG_URI" | sed 's/^.*\.\(.*\)$/\1/')
  NEW_URI="$ORG_BASE-repaired.$ORG_EXT"

  # generate temporary local filename
  ORG_TMP=$(mktemp -t XXXXXXXX.${ORG_EXT})
  NEW_TMP=$(mktemp -t XXXXXXXX.${ORG_EXT})

  # copy input file to temporary local file
  gvfs-copy "${ORG_URI}" "${ORG_TMP}"

  # generate corrected PDF
  gs -q -dNOPAUSE -dBATCH -dSAFER -sDEVICE=pdfwrite -sOutputFile="${NEW_TMP}" "${ORG_TMP}"

  # copy back corrected file
  gvfs-copy "${NEW_TMP}" "${NEW_URI}"

  # remove temporary local files
  rm ${ORG_TMP}
  rm ${NEW_TMP}

  # send desktop notification
  NEW_NAME=$(echo "$NEW_URI" | sed 's/^.*\/\(.*\)$/\1/')
  notify-send "Repaired PDF is $NEW_NAME"
fi
